// hooks/useLFPExport.tsx
import { useState } from 'react';
import { Alert } from 'react-native';
import { generateLFPPDFWithProgress, printLFPPDFWithProgress } from './usePDFGenerate';
import { Asset, Goal, PersonalFinancialPlan } from './useStore';

interface UseLFPExportOptions {
  personalFinancialPlan: PersonalFinancialPlan | null;
  currency?: string;
  language?: 'ru' | 'en' | 'kz';
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  goals?: Goal[];
  incomes?: Asset[];
  actives?: Asset[];
  passives?: Asset[];
  appCurrency?: "‚Ç∏" | "$" | "‚Ç¨";}




interface LoadingState {
  isVisible: boolean;
  status: 'generating' | 'sharing' | 'success' | 'error';
  message: string;
  progress: number;
}

export const useLFPExport = (options: UseLFPExportOptions) => {
  const { personalFinancialPlan, currency = '‚Ç∏', language = 'ru' } = options;
  
  const [loadingState, setLoadingState] = useState<LoadingState>({
    isVisible: false,
    status: 'generating',
    message: '',
    progress: 0
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  const updateLoadingState = (updates: Partial<LoadingState>) => {
    setLoadingState(prev => ({ ...prev, ...updates }));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∞
  const closeModal = () => {
    setLoadingState({
      isVisible: false,
      status: 'generating',
      message: '',
      progress: 0
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF
  const exportToPDF = async () => {
    if (!personalFinancialPlan) {
      Alert.alert(
        '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã',
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –õ–∏—á–Ω–æ–≥–æ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ü–ª–∞–Ω–∞',
        [{ text: 'OK' }]
      );
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª –∑–∞–≥—Ä—É–∑–∫–∏
    setLoadingState({
      isVisible: true,
      status: 'generating',
      message: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞...',
      progress: 0
    });

    try {
      const success = await generateLFPPDFWithProgress({
        personalFinancialPlan,
        currency,
        language,
        onStatusChange: (status) => updateLoadingState({ status }),
        onProgressChange: (progress) => updateLoadingState({ progress }),
        onMessageChange: (message) => updateLoadingState({ message })
      });

      if (success) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã, –∑–∞—Ç–µ–º –∑–∞–∫—Ä—ã–≤–∞–µ–º
        setTimeout(() => {
          closeModal();
        }, 2000);
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
        updateLoadingState({
          status: 'error',
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF —Ñ–∞–π–ª'
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      updateLoadingState({
        status: 'error',
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ PDF
  const printPDF = async () => {
    if (!personalFinancialPlan) {
      Alert.alert(
        '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã',
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –õ–∏—á–Ω–æ–≥–æ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ü–ª–∞–Ω–∞',
        [{ text: 'OK' }]
      );
      return;
    }

    setLoadingState({
      isVisible: true,
      status: 'generating',
      message: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—á–∞—Ç–∏...',
      progress: 0
    });

    try {
      const success = await printLFPPDFWithProgress({
        personalFinancialPlan,
        currency,
        language,
        onStatusChange: (status) => updateLoadingState({ status }),
        onProgressChange: (progress) => updateLoadingState({ progress }),
        onMessageChange: (message) => updateLoadingState({ message })
      });

      if (success) {
        setTimeout(() => {
          closeModal();
        }, 2000);
      } else {
        updateLoadingState({
          status: 'error',
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–µ—á–∞—Ç—å'
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏:', error);
      updateLoadingState({
        status: 'error',
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
  const showExportMenu = () => {
    if (!personalFinancialPlan) {
      Alert.alert(
        '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã',
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –õ–∏—á–Ω–æ–≥–æ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ü–ª–∞–Ω–∞',
        [{ text: 'OK' }]
      );
      return;
    }

    Alert.alert(
      '–≠–∫—Å–ø–æ—Ä—Ç –õ–§–ü',
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º',
      [
        {
          text: '–û—Ç–º–µ–Ω–∞',
          style: 'cancel'
        },
        {
          text: 'üìÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF',
          onPress: exportToPDF
        },
        {
          text: 'üñ®Ô∏è –ü–µ—á–∞—Ç—å',
          onPress: printPDF
        }
      ]
    );
  };

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    loadingState,
    isDataAvailable: !!personalFinancialPlan,
    
    // –§—É–Ω–∫—Ü–∏–∏
    exportToPDF,
    printPDF,
    showExportMenu,
    closeModal,
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    updateLoadingState
  };
};

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ö—É–∫–∞
export const exportLFPWithModal = async (
  personalFinancialPlan: PersonalFinancialPlan,
  options: {
    currency?: string;
    language?: 'ru' | 'en' | 'kz';
    onShowModal: (state: LoadingState) => void;
    onHideModal: () => void;
  }
) => {
  const { currency = '‚Ç∏', language = 'ru', onShowModal, onHideModal } = options;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª
  onShowModal({
    isVisible: true,
    status: 'generating',
    message: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞...',
    progress: 0
  });

  try {
    const success = await generateLFPPDFWithProgress({
      personalFinancialPlan,
      currency,
      language,
      onStatusChange: (status) => onShowModal({
        isVisible: true,
        status,
        message: '',
        progress: 0
      }),
      onProgressChange: (progress) => onShowModal({
        isVisible: true,
        status: 'generating',
        message: '',
        progress
      }),
      onMessageChange: (message) => onShowModal({
        isVisible: true,
        status: 'generating',
        message,
        progress: 0
      })
    });

    if (success) {
      onShowModal({
        isVisible: true,
        status: 'success',
        message: 'PDF —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!',
        progress: 100
      });
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        onHideModal();
      }, 2000);
    } else {
      onShowModal({
        isVisible: true,
        status: 'error',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF —Ñ–∞–π–ª',
        progress: 0
      });
    }

    return success;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
    onShowModal({
      isVisible: true,
      status: 'error',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞',
      progress: 0
    });
    return false;
  }
};